% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rutils.R
\name{to_period}
\alias{to_period}
\title{Aggregate an \code{OHLC} time series to a lower periodicity.}
\usage{
to_period(oh_lc, period = "minutes", k = 1,
  end_points = xts::endpoints(oh_lc, period, k))
}
\arguments{
\item{oh_lc}{an \code{OHLC} time series of prices in \code{xts} format.}

\item{period}{aggregation interval ("seconds", "minutes", "hours", "days",
"weeks", "months", "quarters", and "years").}

\item{k}{number of periods to aggregate over (for example if period="minutes"
and k=2, then aggregate over two minute intervals.)}

\item{end_points}{an integer vector of end points.}
}
\value{
A \code{OHLC} time series of prices in \code{xts} format, with a
  lower periodicity defined by the end_points.
}
\description{
Given an \code{OHLC} time series at high periodicity (say seconds),
calculates the \code{OHLC} prices at lower periodicity (say minutes).
}
\details{
The function \code{to_period()} performs a similar aggregation as
  function \code{to.period()} from package
  \href{https://cran.r-project.org/web/packages/xts/index.html}{xts}, but has
  the flexibility to aggregate to a user-specified vector of end points. The
  function \code{to_period()} simply calls the compiled function
  \code{toPeriod()} (from package
  \href{https://cran.r-project.org/web/packages/xts/index.html}{xts}), to
  perform the actual aggregations.  If \code{end_points} are passed in
  explicitly, then the \code{period} argument is ignored.
}
\examples{
# define end points at 10-minute intervals (SPY is minutely bars)
end_points <- rutils::end_points(SPY["2009"], inter_val=10)
# aggregate over 10-minute end_points:
to_period(x_ts=SPY["2009"], end_points=end_points)
# aggregate over days:
to_period(oh_lc=SPY["2009"], period="days")
# equivalent to:
to.period(x=SPY["2009"], period="days", name=rutils::na_me(SPY))
}

