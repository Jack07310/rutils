{
  "name": "Rutils",
  "tagline": "Utility functions for simplifying financial data management and modeling",
  "body": "The *rutils* package is a collection of functions for simplifying data management and modeling, and is used by many other algoquant packages.  \r\nThe *rutils* package contains functions for:\r\n\r\n- extracting names and columns from time series, \r\n- calculating the end points of a time series, \r\n- applying lags to vectors and matrices, \r\n- calculating row differences of vectors and matrices, \r\n- recursively binding a list of objects into time series, \r\n- recursively applying a function to a list of objects, \r\n- plotting time series with custom axis range and background shading. \r\n\r\nThe *rutils* package also includes a dataset with *OHLC* time series data for a portfolio of symbols.  The data is contained in an environment called *env_etf*, which includes: \r\n\r\n- *sym_bols*: a vector of strings with the portfolio symbols.\r\n- individual time series *VTI*, *VEU*, etc., containing daily *OHLC* prices for all the sym_bols.\r\n- *price_s*: a single *xts* time series containing daily closing prices for all the sym_bols.\r\n- *re_turns*: a single *xts* time series containing daily returns for all the sym_bols.\r\n\r\nEach individual *xts* time series contains the columns: Open prices, High prices, Low prices, Close prices, trading Volume, Adjusted prices.\r\n\r\n\r\n========\r\n\r\n### Installation and loading\r\n\r\nInstalling *rutils* package from *GitHub*:  \r\n```{r eval=FALSE}\r\ninstall.packages(\"devtools\")\r\nlibrary(devtools)\r\ninstall_github(repo=\"algoquant/rutils\")\r\nlibrary(rutils)\r\n```\r\n\r\n========\r\n\r\n### Data\r\n\r\nThe *rutils* package contains a dataset of daily *OHLC* time series in *xts* format, for a portfolio of stock symbols.  The time series are contained in an environment called *env_etf*.  The data is set up for lazy loading, so it doesn't require calling `data(etf_data)` to load it before being able to call it.  \r\n```{r echo=-1, eval=FALSE}\r\nlibrary(rutils)\r\n# get first six rows of VTI prices\r\nhead(env_etf$VTI)\r\n# plot\r\nchart_Series(x=env_etf$VTI[\"2009-11\"])\r\n```\r\n\r\n\r\n========\r\n\r\n### Examples\r\n\r\nExtract the name of an *OHLC* time series from its first column name:  \r\n```{r echo=-1, eval=FALSE}\r\nsuppressMessages(suppressWarnings(library(rutils)))\r\n# show portfolio symbols\r\nenv_etf$sym_bols\r\n# get name for VTI\r\nna_me(env_etf$VTI)\r\n# get first six rows of VTI prices\r\nhead(env_etf$VTI)\r\n# get first six rows of price_s\r\nenv_etf$price_s[1:6, 1:4]\r\n# get first six rows of re_turns\r\nenv_etf$re_turns[1:6, 1:4]\r\n```\r\n\r\n\r\nCalculate a vector of equally spaced end points for a time\r\nseries:  \r\n```{r eval=FALSE}\r\n# calculate end points with initial stub interval\r\nend_points(env_etf$VTI, inter_val=7, off_set=4)\r\n```\r\n\r\n\r\nExtract close prices from an *OHLC* time series:  \r\n```{r eval=FALSE}\r\n# get close prices for VTI\r\nclo_se(env_etf$VTI)\r\n# get volumes for VTI\r\nclo_se(env_etf$VTI, which_col=\"vol\")\r\n```\r\n\r\n\r\nApply a lag to a vector or matrix:  \r\n```{r eval=FALSE}\r\n# lag vector by 2 periods\r\nlag_it(1:10, lag=2)\r\n# lag matrix by negative 2 periods\r\nlag_it(matrix(1:10, ncol=2), lag=-2)\r\n```\r\n\r\n\r\nCalculate the row differences of a vector or matrix:  \r\n```{r eval=FALSE}\r\n# diff vector by 2 periods\r\ndiff_it(1:10, lag=2)\r\n# diff matrix by negative 2 periods\r\ndiff_it(matrix(1:10, ncol=2), lag=-2)\r\n```\r\n\r\n\r\nCalculate the time differences of an *xts* time series and pad with zeros:  \r\n```{r eval=FALSE}\r\n# calculate time differences over lag by 10 periods\r\nrutils::diff_xts(env_etf$VTI, lag=10)\r\n```\r\n\r\n\r\nRecursively rbind a list of objects:  \r\n```{r eval=FALSE}\r\n# create xts time series\r\nx_ts <- xts(x=rnorm(1000), order.by=(Sys.time()-3600*(1:1000)))\r\n# split time series into daily list\r\nlist_xts <- split(x_ts, \"days\")\r\n# rbind the list back into a time series and compare with the original\r\nidentical(x_ts, do_call_rbind(list_xts))\r\n```\r\n\r\n\r\nRecursively apply a function to a list of objects:  \r\n```{r eval=FALSE}\r\n# create xts time series\r\nx_ts <- xts(x=rnorm(1000), order.by=(Sys.time()-3600*(1:1000)))\r\n# split time series into daily list\r\nlist_xts <- split(x_ts, \"days\")\r\n# rbind the list back into a time series and compare with the original\r\nidentical(x_ts, do_call(rbind, list_xts))\r\n```\r\n\r\n\r\nApply a function to a list of objects, merge the outputs into a single object, and assign the object to the output environment:  \r\n```{r eval=FALSE}\r\ndo_call_assign(\r\n   func_tion=clo_se,\r\n   sym_bols=env_etf$sym_bols,\r\n   out_put=\"price_s\",\r\n   env_in=env_etf, env_out=new_env)\r\n```\r\n\r\n\r\nPlot an *xts* time series with custom y-axis range and with vertical background shading:  \r\n```{r echo=-1, eval=FALSE, fig.width=6, fig.height=4}\r\nsuppressMessages(suppressWarnings(library(rutils)))\r\nchart_xts(env_etf$VTI[\"2015-11\"],\r\nname=\"VTI in Nov 2015\", ylim=c(102, 108),\r\nin_dex=index(env_etf$VTI[\"2015-11\"]) > as.Date(\"2015-11-18\"))\r\n```\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}